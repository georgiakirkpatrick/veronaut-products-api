CREATE TABLE certifications (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    english_name TEXT NOT NULL,
    website TEXT,
    approved_by_admin BOOLEAN DEFAULT false,
    date_published TIMESTAMPTZ DEFAULT now() NOT NULL
);

.get(async (req, res, next) => {
        try {
            const productId = res.product.id
            const productFabrics = await ProductsService.getFabricsForProduct(req.app.get('db'), productId)
            const newFabricArray = productFabrics.map(async fabric => {
                try {
                    const newFabricPromises = []

                    const fabCerts = await FabricsService.getFabCerts(
                        req.app.get('db'),
                        fabric.id
                    )

                    const fabFibs = await FabricsService.getFabFibers(
                        req.app.get('db'),
                        fabric.id
                    )

                    // const allFibCerts = async () => {
                    //     try {
                    

                    const fibCertArray = fabFibs.map(async fiber => {
                        try {
                            const fibCerts = await FibersService.getFibCerts(
                                req.app.get('db'),
                                fiber.id
                            )

                            newFabricPromises.push(fibCerts)

                            console.log('fibCerts', fibCerts)
                            const promiseContent = await Promise.all(fibCerts)

                            const filteredArrays = promiseContent.length > 0 ? promiseContent : null
                            return filteredArrays
                            // return await Promise.all(fibCerts)
                        } catch (e) {
                            console.log('fibCertArray error:', e)
                            next(e)
                        }
                    })



                        // } catch (e) {
                        //     console.log('allFibCerts error:', e)
                        //     next(e)
                        // }
                    // }

                    // fabFibs.map(async fiber => {
                    //     try {
                    //         const fibCerts = await FibersService.getFibCerts(
                    //             req.app.get('db'),
                    //             fiber.id
                    //         )

                    //         return fibCerts[0]
                    //     } catch (e) {
                    //     }
                    // })

                    console.log('fabFibs', fabFibs)

                    const fabFibsWithCerts = fabFibs.map(async fiber => {
                        try {
                            const promiseContent = await Promise.all(fibCertArray)

                            console.log('fibCertArray', fibCertArray)


                            const filteredCertArray = promiseContent.filter(cert => cert.fiber_id === fiber.id)
                            const fibCertIds = filteredCertArray.map(cert => cert.certification_id)

                            console.log('filteredCertArray', filteredCertArray)

                            const newFiber = {
                                approved_by_admin: fiber.approved_by_admin,
                                brand_id: fiber.brand_id,
                                certification_ids: fibCertIds,
                                class: fiber.class,
                                date_published: fiber.date_published,
                                factory_country: fiber.factory_country,
                                fiber_type: fiber.fiber_type,
                                fiber_type_id: fiber.fiber_type_id,
                                id: fiber.id,
                                percent_of_fabric: fiber.percent_of_fabric,
                                producer: fiber.producer,
                                producer_country: fiber.producer_country,
                                producer_id: fiber.producer_id,
                                producer_website: fiber.producer_website,
                                production_notes: fiber.production_notes
                            }

                            await Promise.all(fibCertArray)

                            return newFiber
                        } catch (e) {
                            next(e)
                        }
                    })

                    const newFabric = await {
                        id: fabric.id,
                        brand_id: fabric.brand_id,
                        relationship: fabric.relationship,
                        fabric_mill_country: fabric.fabric_mill_country,
                        fabric_mill_id: fabric.fabric_mill_id,
                        fabric_mill_notes: xss(fabric.fabric_mill_notes),
                        dye_print_finish_country: fabric.dye_print_finish_country,
                        dye_print_finish_id: fabric.dye_print_finish_id,
                        dye_print_finish_notes: xss(fabric.dye_print_finish_notes),
                        certification_ids: fabCerts.map(cert => cert.certification_id),
                        fibers: await Promise.all(fabFibsWithCerts),
                        approved_by_admin: fabric.approved_by_admin,
                        date_published: fabric.date_published
                    }

                    return newFabric

                } catch (e) {
                    console.log('catch 6', e)
                }
            })

            res
                .status(200)
                .json(await Promise.all(newFabricArray))

        } catch (e) {
            console.log('catch 7', e)
        }
    })